(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{387:function(t,a,s){"use strict";s.r(a);var n=s(33),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-知识点合集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-知识点合集"}},[t._v("#")]),t._v(" vue 知识点合集")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Vue 是一个用于构建用户界面的开源Javascript框架，也是一个创建单页面的 Web 应用框架。Vue 关注的核心是视图层，可以方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互。")])]),t._v(" "),s("h2",{attrs:{id:"浅谈mvc-、mvvm、mvp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅谈mvc-、mvvm、mvp"}},[t._v("#")]),t._v(" 浅谈MVC 、MVVM、MVP")]),t._v(" "),s("p",[s("font",{attrs:{size:"5",color:"red"}},[t._v(" MVC ")])],1),t._v(" "),s("p",[t._v("MVC 是一个编程思想，是一种设计模式。")]),t._v(" "),s("ul",[s("li",[t._v("Model: 数据模型层，将数据发送到 View 层；")]),t._v(" "),s("li",[t._v("View： 视图层，显示界面，传送指令到 Controller；")]),t._v(" "),s("li",[t._v("Controller：控制层，完成业务逻辑后调用数据渲染视图；")])]),t._v(" "),s("p",[t._v("所有的通信都是单向的")]),t._v(" "),s("p",[s("font",{attrs:{size:"5",color:"red"}},[t._v(" MVP ")])],1),t._v(" "),s("p",[t._v("MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。")]),t._v(" "),s("ul",[s("li",[t._v("Model: 数据模型层；")]),t._v(" "),s("li",[t._v("View： 视图层，显示界面；")]),t._v(" "),s("li",[t._v("Presenter：控制层，完成业务逻辑后调用数据渲染视图；")])]),t._v(" "),s("p",[t._v("各部分的通信都是双向的")]),t._v(" "),s("p",[t._v("View 与 Model 不发生联系，都通过 Presenter 传递。")]),t._v(" "),s("p",[s("font",{attrs:{size:"5",color:"red"}},[t._v(" MVVM ")])],1),t._v(" "),s("p",[t._v("MVVM 也是一种设计思想，简称为数据驱动。")]),t._v(" "),s("ul",[s("li",[t._v("Model: 数据模型层，负责处理业务逻辑以及和服务器端进行交互；")]),t._v(" "),s("li",[t._v("View： 视图层，负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面；")]),t._v(" "),s("li",[t._v("ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁；")])]),t._v(" "),s("p",[t._v("各部分之间的通信时双向的，采用双向绑定，view的变动自动反映到 ViewModel。")]),t._v(" "),s("h2",{attrs:{id:"双向数据绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向数据绑定"}},[t._v("#")]),t._v(" 双向数据绑定")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("数据绑定:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("单向绑定：把 Model 绑定到 View,当我们用 JavaScript 代码 更新 Model 时，view 就会自动更新。\n\n双向绑定：用户更新View, Modele 的数据也自动更新了，这个就是双向数据绑定。\n")])])])]),t._v(" "),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 双向数据绑定的原理？")])],1)]),t._v(" "),s("p",[t._v("vue 实现双向数据的绑定主要是通过数据的劫持结合发布/订阅模式的方式，通过Object.defineProperty()的set,get 方法。在数据变动的时候发布消息给订阅者触发监听。")]),t._v(" "),s("h2",{attrs:{id:"对-spa-的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对-spa-的理解"}},[t._v("#")]),t._v(" 对 SPA 的理解")]),t._v(" "),s("p",[t._v("SPA，简称单页面应用。主要通过页面重写当前页面来与用户交互，避免了页面之间切换打断用户体验。Vue 就是属于单页面应用。")]),t._v(" "),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 1，单页面与多页面的区别？")])],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("单页面")]),t._v(" "),s("ul",[s("li",[t._v("由一个主页面和多个页面片段组成")]),t._v(" "),s("li",[t._v("页面刷新是局部刷新")]),t._v(" "),s("li",[t._v("难以做页面SEO，可通过 SSR 方式")]),t._v(" "),s("li",[t._v("数据传递容易")]),t._v(" "),s("li",[t._v("页面切换快，用户体验好")]),t._v(" "),s("li",[t._v("首屏加载慢")])])]),t._v(" "),s("li",[s("p",[t._v("多页面")]),t._v(" "),s("ul",[s("li",[t._v("由多个主页面组成")]),t._v(" "),s("li",[t._v("页面刷新是整页刷新")]),t._v(" "),s("li",[t._v("容易实现 SEO")]),t._v(" "),s("li",[t._v("切换加载资源，速度慢，用户体验差")])])])]),t._v(" "),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 2，实现单页面的SEO？")])],1)]),t._v(" "),s("p",[t._v("SSR服务端渲染，将组件或页面通过服务器生成html，再返回给浏览器，如nuxt.js")]),t._v(" "),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 3，SPA 首屏加载慢问题")])],1)]),t._v(" "),s("p",[t._v("SPA 首屏优化的方式：")]),t._v(" "),s("ul",[s("li",[t._v("通过路由懒加载，减小入口文件体积；")]),t._v(" "),s("li",[t._v("静态资源本地缓存（后端资源返回，设置Cache-Control 响应头）；")]),t._v(" "),s("li",[t._v("UI框架按需加载；")]),t._v(" "),s("li",[t._v("图片资源的压缩；")]),t._v(" "),s("li",[t._v("开启GZip压缩；")])]),t._v(" "),s("h2",{attrs:{id:"vue-组件中data-属性返回的是一个函数而不是一个对象？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件中data-属性返回的是一个函数而不是一个对象？"}},[t._v("#")]),t._v(" vue 组件中data 属性返回的是一个函数而不是一个对象？")]),t._v(" "),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 1，VUE 实例和组件定义data的 区别")])],1)]),t._v(" "),s("p",[t._v("vue实例的时候定义data 属性既可以是对象，也可以是函数")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("   const app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      el:"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#app"')]),t._v(",\n      // 对象格式\n      data:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         foo:"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n      // 函数格式\n      "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               foo:"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("组件中定义data 属性只能是函数")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("Vue.component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'component1'")]),t._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    template:"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("组件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(",\n    data:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        foo:"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[s("font",{attrs:{size:"3"}},[t._v(" 2，VUE 组件中定义 data 属性为什么必须是函数？")])],1)]),t._v(" "),s("p",[t._v("组件实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数都会返回全新data对象。")]),t._v(" "),s("p",[t._v("模仿组件构造函数，定义data属性，采用对象的形式")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nComponent.prototype.data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcount "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("创建两个组件实例")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("const componentA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconst componentB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("修改componentA组件data属性的值，componentB中的值也发生了改变")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("console.log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentB.data.count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\ncomponentA.data.count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole.log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("componentB.data.count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("产生上述现象的原因是因为两者共用了同一个内存地址，componentA修改的内容，同样对componentB产生了影响。")]),t._v(" "),s("p",[t._v("vue组件可能会有很多个实例，采用函数返回一个全新data形式，使每个实例对象的数据不会受到其他实例对象数据的污染")])])}),[],!1,null,null,null);a.default=e.exports}}]);